{"version":3,"sources":["app/app.loadNode.ts"],"names":[],"mappings":"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","file":"app.loadNode.js","sourcesContent":["import {Component, OnInit, ViewChild} from 'angular2/core';\nimport {ROUTER_DIRECTIVES, OnActivate} from 'angular2/router';\nimport {Http, HTTP_BINDINGS, Response} from 'angular2/http';\nimport {HTTP_PROVIDERS, Headers} from 'angular2/http';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport {QRCodeComponent} from './ng2-qrcode.ts';\n\ndeclare var _: any;\ndeclare var $: any;\ndeclare var async: any;\ndeclare var moment: any;\n\nexport class PagerService {\n    getPager(totalItems: number, currentPage: number = 1, pageSize: number = 5) {\n        // calculate total pages\n        var totalPages = Math.ceil(totalItems / pageSize);\n\n        var startPage, endPage;\n        if (totalPages <= 10) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (currentPage + 4 >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n\n        // calculate start and end item indexes\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        var pages = _.range(startPage, endPage + 1);\n\n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages\n        };\n    }\n}\n\n@Component({\n    selector: 'load-node',\n    directives: [ROUTER_DIRECTIVES, QRCodeComponent],\n    providers: [PagerService],\n    templateUrl: 'app/templates/node.html'\n})\n\nexport class loadNodeComponent implements OnInit {\n    //Declare default variables\n    nodes : Array<any>;\n    \n    //user details\n    userName: string;\n    Password: string;\n\n    QrAddress: string;\n    QrIsVisible: boolean;\n\n    NewNodeIsVisible: boolean;\n\n    nodeName: string;\n    nodeId: string;\n    nodeType: string;\n    nodeZone: string;\n\n    connections: Array<any>;\n    defaultConnections: Array<any>;\n    NewDefaultConnectionIsVisible : boolean;\n    EditDefaultConnectionIsVisible : boolean;\n    \n    SearchKey:string;\n    selectedNode:any;\n\n    isValidAddress: boolean;\n\n\n    // pager object\n    historyPager: any = {};\n    historyPagedItems: any[];\n\n    //Constructor method for load HTTP object\n    constructor(private http: Http, private pagerService: PagerService) { }\n\n    //Init function for load default value\n    ngOnInit() {\n        this.loadConnections();\n        this.loadDefaultConnections();\n        this.loadNode();\n        this.selectedNode = {};\n       \n        this.loadOutputs();\n        this.isValidAddress = false;\n\n        //Set interval function for loading nodes every 15 seconds\n        setInterval(() => {\n        \tthis.loadConnections();\n            this.loadNode();\n           \n            //console.log(\"Refreshing connections\");\n        }, 30000);\n\n        //Enable button by default\n        this.selectedMenu = \"Nodes\";\n        this.filterAddressVal = '';\n        this.SearchKey = '';\n\n        if(localStorage.getItem('historyUsers') != null){\n            this.user = JSON.parse(localStorage.getItem('historyUsers'));\n        } else {\n            localStorage.setItem('historyUsers',JSON.stringify([]));\n            this.user = JSON.parse(localStorage.getItem('historyUsers'));\n        }\n    }\n\n    //Search button for searching through the nodes\n    search(nodeName, nodeId, nodeType){\n        if(!nodeId){\n            alert(\"Please select from Node ID\");\n            return false;\n        }\n        if(!nodeName){\n            alert(\"Please enter node label\");\n            return false;\n        }\n        if(!nodeType){\n            alert(\"Please enter node type\");\n            return false;\n        }\n        this.readyDisable = true;\n        this.searchDisable = false;\n    }\n\n    //Load node function\n    loadNode(){\n        this.totalPuebe = 0;\n        this.http.post('/nodes', '')\n            .map((res:Response) => res.json())\n            .subscribe(\n                data => {\n                    if(this.nodes == null || this.nodes.length == 0) {\n                      _.each(data, (o)=>{\n                        o.showChild = false;\n                      })\n                      this.nodes = data;\n                      if (this.nodes.length > 0) {\n                        this.onSelectNode(this.nodes[0].meta.nodeName);\n                      }\n                    } else {\n                      data.map((w)=>{\n                        var old = _.find(this.nodes, (o)=>{\n                          return o.meta.nodeName === w.meta.nodeName;\n                        })\n\n                        if(old) {\n                          _.extend(old, w);\n                        } else {\n                          w.showChild = false;\n                          this.nodes.push(w);\n                        }\n                      })\n                    }\n\n                    //console.log(\"this.nodes\", this.nodes);\n\n                    //Load data for each nodeBalance for each node\n                    var inc;\n                    for(var item in data){\n                        var name = data[inc].meta.nodeName;\n                        var id = data[inc].meta.instanceid;\n                        var type = data[inc].meta.instancetype;\n                        var zone = data[inc].meta.instancezone;\n                        this.loadNodeItem(name,id, type, zone, inc);\n                        inc;\n                    }\n\n                },\n                err => console.log(\"Error on loading node instance: \"+err),\n                () => {\n                  //console.log('Node load successful')\n                }\n            );\n    }\n    checkValidAddress(address) {\n      if(address === \"\")\n        this.isValidAddress = false;\n      else {\n        var headers = new Headers();\n        headers.append('Content-Type', 'application/x-www-form-urlencoded');\n        this.http.get('/node?addrs=' + address, { headers: headers })\n            .map((res) => res.json())\n            .subscribe(\n                //Response from API\n                response => {\n                    this.isValidAddress = true;\n                }, err => {\n                  //console.log(\"Error on ssh address: \" + err)\n                  this.isValidAddress = false;\n                }, () => {\n\n                })\n      }\n    }\n    loadNodeItem(address, inc){\n        //Set http headers\n        var headers = new Headers();\n        headers.append('Content-Type', 'application/x-www-form-urlencoded');\n        this.http.get('/node/connections?id=' + address, { headers: headers })\n            .map((res) => res.json())\n            .subscribe(\n                //Response from API\n                response => {\n                    //console.log('load done: ' + inc, response);\n                    this.nodes[inc].balance = response.confirmed.coins / 1000000;\n                    this.totalPuebe += 1;\n                }, err => console.log(\"Error on load balance: \" + err), () => {\n                  //console.log('Balance load done')\n                })\n        //get address balances\n        this.nodes[inc].entries.map((entry)=>{\n          this.http.get('/balance?addrs=' + entry.address, { headers: headers })\n              .map((res) => res.json())\n              .subscribe(\n                  //Response from API\n                  response => {\n                      //console.log('balance:' + entry.address, response);\n                      entry.balance = response.confirmed.coins / 1000000;\n                  }, err => console.log(\"Error on load balance: \" + err), () => {\n                    //console.log('Balance load done')\n                  })\n        })\n    }\n    loadConnections() {\n        this.http.post('/node/connections', '')\n            .map((res) => res.json())\n            .subscribe(data => {\n                //console.log(\"connections\", data);\n                this.connections = data.connections;\n            }, err => console.log(\"Error loading connection node: \" + err), () => {\n              //console.log('Connection node loaded')\n            });\n    }\n    \n   \n    loadDefaultConnections() {\n        this.http.post('/node/defaultConnections', '')\n            .map((res) => res.json())\n            .subscribe(data => {\n                //console.log(\"default connections\", data);\n                this.defaultConnections = data;\n            }, err => console.log(\"Error on load default connection: \" + err), () => {\n              //console.log('Default connections load done')\n            });\n    }\n    loadOutputs() {\n        var headers = new Headers();\n        headers.append('Content-Type', 'application/x-www-form-urlencoded');\n        this.http.get('/outputs', { headers: headers })\n            .map((res) => res.json())\n            .subscribe(data => {\n                this.outputs = _.sortBy(data, function(o){\n                    return o.address;\n                });\n            }, err => console.log(\"Error on load outputs: \" + err), () => {\n              //console.log('Connection load done')\n            });\n    }\n    \n    //Load progress function for Puebe\n    loadProgress(){\n        //Post method executed\n        this.http.post('/node/progress', '')\n            .map((res:Response) => res.json())\n            .subscribe(\n                //Response from API\n                response => { this.progress = (parseInt(response.current,10)+1) / parseInt(response.highest,10) * 100 },\n                err => console.log(\"Error on loading progress: \"+err),\n                () => {\n                  //console.log('Progress load done:' + this.progress)\n                }\n            );\n    }\n    toggleShowChild(node) {\n      node.showChild = !node.showChild;\n    }\n\n\n    getDateTimeString(ts) {\n        return moment.unix(ts).format(\"YYYY-MM-DD HH:mm\")\n    }\n    getElapsedTime(ts) {\n        return moment().unix() - ts;\n    }\n    //Show QR code function for show QR popup\n    showQR(node){\n        this.QrAddress = node.entries[0].address;\n        this.QrIsVisible = true;\n    }\n    //Hide QR code function for hide QR popup\n    hideQrPopup(){\n        this.QrIsVisible = false;\n    }\n\n    //Show node function for view New node popup\n    showNewNodeDialog(){\n        this.NewNodeIsVisible = true;\n        this.randomWords = this.getRandomWords();\n    }\n    //Hide node function for hide New node popup\n    hideNodePopup(){\n        this.NewNodeIsVisible = false;\n    }\n    showNewDefaultConnectionDialog(){\n        this.NewDefaultConnectionIsVisible = true;\n    }\n    hideNewDefaultConnectionDialog(){\n        this.NewDefaultConnectionIsVisible = false;\n    }\n    showEditDefaultConnectionDialog(item){\n        this.oldConnection = item;\n        this.EditDefaultConnectionIsVisible = true;\n    }\n    hideEditDefaultConnectionDialog(){\n        this.EditDefaultConnectionIsVisible = false;\n    }\n    createDefaultConnection(connectionValue){\n        //console.log(\"new value\", connectionValue);\n        this.defaultConnections.push(connectionValue);\n        this.NewDefaultConnectionIsVisible = false;\n    }\n    updateDefaultConnection(connectionValue){\n        //console.log(\"old/new value\", this.oldConnection, connectionValue);\n        var idx = this.defaultConnections.indexOf(this.oldConnection);\n        this.defaultConnections.splice(idx, 1);\n        this.defaultConnections.splice(idx, 0, connectionValue);\n        this.EditDefaultConnectionIsVisible = false;\n    }\n    deleteDefaultConnection(item){\n        var idx = this.defaultConnections.indexOf(item);\n        this.defaultConnections.splice(idx, 1);\n    }\n    \n    \n    //Add new node function for generate new node in Puebe\n    createNewNode(nodeName, address, Port, userName, Password){\n\n        //check if label is duplicated\n        var old = _.find(this.nodes, function(o){\n          return (o.meta.nodeName == nodeName)\n        })\n\n        if(old) {\n          alert(\"This node label is used already\");\n          return;\n        }\n\n        //Set http headers\n        var headers = new Headers();\n        headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n        //Post method executed\n        var stringConvert = 'userName='+userNameName+'&Password='+Password;\n        this.http.post('/node/create', stringConvert, {headers: headers})\n            .map((res:Response) => res.json())\n            .subscribe(\n                response => {\n                  console.log(response)\n\n      \n            \n    }\n\n    //Edit existing node function\n    editNode(node){\n        this.EditNodeIsVisible = true;\n        this.nodeId = node.meta.nodeName;\n    }\n    addNewAddress(node) {\n      //Set http headers\n      var headers = new Headers();\n      headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n      //Post method executed\n      var stringConvert = 'id='+node.meta.address+node.meta.Port;\n      this.http.post('/node/newAddress', stringConvert, {headers: headers})\n          .map((res:Response) => res.json())\n          .subscribe(\n              response => {\n              console.log(response)\n              alert(\"New address created successfully\");\n              //Load node for refresh list\n              this.loadNode();\n              },\n              err => {\n                console.log(err);\n              },\n              () => {}\n          );\n    }\n    //Hide edit node function\n    hideEditNodePopup(){\n        this.EditNodeIsVisible = false;\n    }\n\n    //Update node function for update node label\n    updateNode(nodeid, nodeName){\n      console.log(\"update node\", nodeid, nodeName);\n        //check if label is duplicated\n        var old = _.find(this.nodes, function(o){\n          return (o.meta.label == nodeName)\n        })\n\n        if(old) {\n          alert(\"This node label is used already\");\n          return;\n        }\n\n        //Set http headers\n        var headers = new Headers();\n        headers.append('Content-Type', 'application/x-www-form-urlencoded');\n        var stringConvert = 'label='+nodeName+'&id='+nodeid;\n        //Post method executed\n        this.http.post('/node/update', stringConvert, {headers: headers})\n            .map((res:Response) => res.json())\n            .subscribe(\n                response => {\n                    //Hide new node popup\n                    this.EditNodeIsVisible = false;\n                    alert(\"Node updated successfully\");\n                    //Load node for refresh list\n                    this.loadNode();\n                },\n                err => console.log(\"Error on update node: \"+JSON.stringify(err)),\n                () => {\n                  //console.log('Update node done')\n                }\n            );\n    }\n\n    sortHistory(key) {\n      if(this.sortDir[key]==0)\n        this.sortDir[key] = 1;\n      else\n        this.sortDir[key] = this.sortDir[key] * (-1);\n\n      if(key == 'time'){\n        this.sortDir['address'] = 0;\n        this.sortDir['amount'] = 0;\n      } else if(key == 'amount') {\n        this.sortDir['time'] = 0;\n        this.sortDir['address'] = 0;\n      } else {\n        this.sortDir['time'] = 0;\n        this.sortDir['amount'] = 0;\n      }\n\n      var self = this;\n        if(key == 'time') {\n            this.historyTable = _.sortBy(this.historyTable, function(o){\n                return o.txn.timestamp;\n            });\n        } else if(key == 'amount') {\n            this.historyTable = _.sortBy(this.historyTable, function(o){\n                return Number(o[key]);\n            });\n        } else if(key == 'address') {\n            this.historyTable = _.sortBy(this.historyTable, function(o){\n                return o[key];\n            })\n        };\n\n        if(this.sortDir[key] == -1) {\n          this.historyTable = this.historyTable.reverse();\n        }\n\n            this.setHistoryPage(this.historyPager.currentPage);\n    }\n\n    filterHistory(address) {\n      console.log(\"filterHistory\", address)\n      this.filterAddressVal = address;\n    }\n\n    setHistoryPage(page: number) {\n        this.historyPager.totalPages = this.historyTable.length\n\n        if (page < 1 || page > this.historyPager.totalPages) {\n            return;\n        }\n\n        // get pager object from service\n        this.historyPager = this.pagerService.getPager(this.historyTable.length, page);\n\n        console.log(\"this.historyPager\", this.historyPager );\n        // get current page of items\n        this.historyPagedItems = this.historyTable.slice(this.historyPager.startIndex, this.historyPager.endIndex + 1);\n        //console.log('this.pagedItems', this.historyTable, this.pagedItems);\n    }\n\n    searchHistory(searchKey){\n      console.log(searchKey)\n\n    }\n    \n    onSelectNode(val) {\n      console.log(\"onSelectNode\", val)\n      //this.selectedNode = val;\n      this.spendid = val;\n      this.selectedNode = _.find(this.nodes, function(o){\n        return o.meta.nodeName === val;\n      })\n    }\n"]}